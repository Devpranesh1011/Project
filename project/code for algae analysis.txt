# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset
# Example: Cultivation data with environmental factors and nutritional attributes
data = {
    "Light_Intensity": [200, 400, 600, 800, 1000],
    "Temperature": [25, 28, 30, 32, 35],
    "pH": [6.5, 7.0, 7.5, 8.0, 8.5],
    "CO2_Concentration": [1.5, 2.0, 2.5, 3.0, 3.5],
    "Protein_Content": [50, 55, 58, 60, 65],
    "Antioxidants": [20, 25, 30, 35, 40],
    "Yield": [100, 120, 140, 160, 180]
}

df = pd.DataFrame(data)

# Step 2: Correlation Analysis
# Identify relationships between environmental factors and product quality
correlation_matrix = df.corr()
print("Correlation Matrix:\n", correlation_matrix)

# Visualization of the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

# Step 3: Regression Modeling for Predictive Analysis
# Feature variables (X) and target variable (Y - Protein Content)
X = df[["Light_Intensity", "Temperature", "pH", "CO2_Concentration"]]
y = df["Protein_Content"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predict and evaluate
y_pred = lr_model.predict(X_test)
print("Linear Regression Coefficients:", lr_model.coef_)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared Score:", r2_score(y_test, y_pred))

# Step 4: Advanced Modeling for Complex Relationships
# Train a Random Forest Regressor
rf_model = RandomForestRegressor(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)

# Predict and evaluate
y_pred_rf = rf_model.predict(X_test)
print("Random Forest Mean Squared Error:", mean_squared_error(y_test, y_pred_rf))
print("Random Forest R-squared Score:", r2_score(y_test, y_pred_rf))

# Step 5: Visualizing Predictions vs. Actual Values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, label="Linear Regression", alpha=0.7)
plt.scatter(y_test, y_pred_rf, label="Random Forest", alpha=0.7)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color="red", linestyle="--")
plt.xlabel("Actual Protein Content")
plt.ylabel("Predicted Protein Content")
plt.title("Model Predictions vs. Actual")
plt.legend()
plt.show()

# Step 6: Experimental Simulations
# Predicting protein content for new environmental conditions
new_conditions = pd.DataFrame({
    "Light_Intensity": [500, 700],
    "Temperature": [29, 31],
    "pH": [7.2, 7.8],
    "CO2_Concentration": [2.2, 2.8]
})
predicted_protein = rf_model.predict(new_conditions)
print("Predicted Protein Content for New Conditions:\n", predicted_protein)

# Step 7: Visualizing Cultivation Insights
plt.figure(figsize=(10, 6))
plt.scatter(df["Light_Intensity"], df["Protein_Content"], label="Protein Content", color="blue")
plt.scatter(df["Light_Intensity"], df["Yield"], label="Yield", color="green")
plt.xlabel("Light Intensity")
plt.ylabel("Values")
plt.title("Effect of Light Intensity on Protein Content and Yield")
plt.legend()
plt.show()
